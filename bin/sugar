#!/usr/bin/env node
'use strict';

/*<>包裹的options是必传的，使用命令的时候必须要用的，[]包裹的则是可选的*/

const chokidar = require('chokidar')
const commander = require('commander')
const path = require('path')
const fs = require('fs')
let request = require('request')
// request.debug = true

let { info, error } = require('../modules/log')
let { compile } = require('../modules/index')
let { fileExistsSync, exit } = require('../modules/utils')
let meta = require('../package.json')
let cwd = process.cwd()

const sugarConfigFileName = 'sugar.config.json'
let log = info
let hasWatch = false
let DEFAULT_PROJECT_NAME = 'miniapp'
const downloadUrl = 'https://github.com/aliarmo/mini-vue-sugar-template/archive/master.zip'
let sugarConfig = {}
try {
	sugarConfig = require(path.resolve(sugarConfigFileName))
} catch (err) { }

cwd = cwd.replace(/\\/gm, '/')
const watcher = chokidar.watch(`${cwd}/**/*.vue`, Object.assign({
	persistent: true,
	ignored: /node_modules/
}, sugarConfig))

function task() {
	if (hasWatch) return
	hasWatch = true
	console.log("start compile.......\n")
	watcher
		.on('add', (filepath, stat) => {
			action(filepath)
			log(`${filepath} compile successful\n`)
		})
		.on('change', filepath => {
			console.log(`File ${filepath} has been changed`)
			action(filepath)
			log(`re-compile successful\n`)
		})
		.on('unlink', filepath => {
			log(`File ${filepath} has been removed\n`)
		})
		// 事件触发会导致all的触发
		// .on('all', function (event, path) {
		// 	console.log(event, path);
		// })
		.on('ready', function () {
			// 初始扫描完成，可以等待change
			console.log("watching.......\n")
		})
}

function action(filepath) {
	// let template = fs.readFileSync(filepath, 'utf-8')
	fs.readFile(filepath, (err, data) => {
		let content = data.toString()
		let prefix = filepath.replace(/\.vue$/, '')
		let { template, style, script, json } = compile(content, { filepath })
		// .wxml
		template && fs.writeFileSync(`${prefix}.wxml`, template)
		// .wxss
		style && fs.writeFileSync(`${prefix}.wxss`, style)

		// .js
		script && fs.writeFileSync(`${prefix}.js`, script)

		// .json
		let jsonPath = `${prefix}.json`
		let exitJson = {}
		let isComponent = /Component\(\{/.test(script)
		if (fileExistsSync(jsonPath)) {
			try {
				delete require.cache[jsonPath]   // 注意require是会缓存的，这里删除缓存，因为json里面肯定不会require其他文件，所以就没递归删除
				exitJson = require(jsonPath)
			} catch (e) { }
		}
		let using = exitJson['usingComponents'] || (exitJson['usingComponents'] = {})
		json.forEach(({ compsName, filepath }) => {
			using[compsName] = filepath
		})
		if (!Object.keys(using).length) {
			delete exitJson['usingComponents']
		}
		if (isComponent && !exitJson.component) {
			exitJson.component = true
		}
		fs.writeFileSync(jsonPath, JSON.stringify(exitJson))
	})
}
let decompress = require('decompress')
let os = require('os')
let rimraf = require('rimraf')
let osTempPath = os.tmpdir()
let zipName = 'mini-vue-sugar-master'
function download(projectName) {
	let cwd = path.resolve()
	let destDir = path.resolve(projectName)
	let tempPath = path.join(osTempPath, `${zipName}.zip`)
	if (fileExistsSync(destDir)) {
		error(`exist project ${projectName} in ${cwd}`)
		exit()
		return
	}
	let writeStream = fs.createWriteStream(tempPath)
	request.get({
		// url: downloadUrl
		url: 'http://127.0.0.1:3000/download/mini-vue-sugar-master.zip'
	})
		.on('error', function (err) {
			err && error(`download fail,please check your network or you are behind a proxy\n${err}`)
			log(`you can clone the init project at https://github.com/aliarmo/mini-vue-sugar-template \n`)
			exit()
		})
		.pipe(writeStream)

	writeStream.on('finish', () => {
		decompress(tempPath, cwd).then(files => {
			rimraf(tempPath, err => {
				err && error(`rm ${tempPath} fail\n${err}`)
			})
			fs.rename(path.resolve(cwd, zipName), destDir, err => {
				if (err) {
					error(`create ${projectName} fail,please try again later\n${err}`)
				} else {
					console.log(`~~~~~~~~~create ${projectName} successfully`)
				}
				exit()
			})
		})
	})
}

commander
	.version(`v${meta.version}`, '-v, --version')

//sugar i
commander
	.command('init [name]')
	.alias('i')
	.description('init an miniapp project using provided name')
	.action(function (name, cmd) {
		// cmd是commander对象
		name = name || DEFAULT_PROJECT_NAME
		log(`starting init ${name} project,may take a few minutes,waitting \n`)
		download(name)
	})

//sugar c
commander
	.command('compile')
	.option('--no-watch', 'no watch')
	.alias('c')
	.description('compile to miniprogram template sugar and watch')
	.action(function (cmd) {
		// cmd是commander对象
		task()
	})

// commander
// 	.command('release [desc] [desc1]')
// 	.option('-r, --recursive <myVar>', 'Remove recursively')
// 	.option('-b, --bbb <myVar2>', 'myVar2')
// 	.option('--no-sauce', 'Remove sauce')
// 	.alias('r')
// 	.action(function (desc, desc1, cmd) {
// 		console.log("desc：", desc, desc1)
// 		console.log('cmd：', cmd.b, cmd.bbb, cmd.recursive, cmd.sauce)
// 	})



// 默认task
commander
	.command('*')
	.action(function (task) {
		task()
	})

commander.parse(process.argv)


if (!commander.args.length) {
	// 没有参数的时候
	task()
}
